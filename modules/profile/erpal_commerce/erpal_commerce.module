<?php

/**
 * @file
 * Provide main functionality for ERPAL commerce module.
 */

/**
 * Implements hook_menu().
 */
function erpal_commerce_menu() {
  $items = array();

  $items['erpal_commerce/line_item/autocomplete'] = array(
    'title' => 'line_item autocomplete',
    'page callback' => 'erpal_commerce_line_item_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/erpal/settings/vendor'] = array(
    'title' => 'Vendor Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erpal_commerce_vendor_settings_form'),
    'access arguments' => array('configure order settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'erpal_commerce.admin.inc',
  );
  $items['order/%commerce_order/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erpal_commerce_order_delete_form', 1),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );
  // Autocomplete url for commerce lite items field.
  $items['erpal_inline_entity_form/autocomplete'] = array(
    'title' => 'Inline Entity Form Autocomplete',
    'page callback' => 'erpal_commerce_inline_entity_form_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function erpal_commerce_menu_alter(&$items) {

  // Change callback for order title.
  if (!empty($items['admin/commerce/orders/%commerce_order'])) {
    $items['admin/commerce/orders/%commerce_order']['title callback'] = 'erpal_commerce_order_label';
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function erpal_commerce_entity_info_alter(&$entity_info) {

  // Change callback for order label.
  $entity_info['commerce_order']['label callback'] = 'erpal_commerce_order_label';

  // Integrate commerce_customer_profile entity with inline entity form.
  $entity_info['commerce_customer_profile']['inline entity form'] = array(
    'controller' => 'CommerceCustomerProfileInlineEntityFormController',
  );

  // Add callbeck uri for commerce_line_item.
  $entity_info['commerce_line_item']['uri callback'] = 'erpal_commerce_line_item_uri';

  // Add callbeck uri for commerce_line_item.
  $entity_info['commerce_line_item']['label callback'] = 'erpal_commerce_line_item_label';
}

/**
 * Callback for entity uri of order, it need for correct working of order
 *  deletion.
 */
function erpal_commerce_commerce_order_uri($order) {
  return array('path' => 'admin/commerce/orders/' . $order->order_id);
}

/**
 * Callback for entity uri of line item, it need for correct working of order
 *  deletion.
 */
function erpal_commerce_line_item_uri($order) {
  return array('path' => NULL);
}

/**
 * Entity label callback: returns the label for an individual order.
 */
function erpal_commerce_order_label($entity) {
  $type = commerce_order_type_load($entity->type);
  if (!$type) {
    $type = new stdClass();
    $type->name = t('Order');
  }
  return t('@type @number', array('@number' => $entity->order_number, '@type' => $type->name));
}

/**
 * Entity label callback: returns the label for an individual Line item.
 */
function erpal_commerce_line_item_label($entity) {
  return $entity->line_item_label;
}

/**
 * Implements hook_views_api().
 */
function erpal_commerce_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Defines line item types that serve as bundles of the line item entity type.
 *
 * @see hook_commerce_line_item_type_info_alter()
 */
function erpal_commerce_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['invoice'] = array(
    'type' => 'invoice',
    'name' => t('Invoice'),
    'description' => t('Invoice line items creates when any bundle of erpal_output is created.'),
    'product' => FALSE,
    'add_form_submit_value' => t('Add Invoice item'),
    'base' => 'erpal_commerce_line_item',
  );

  return $line_item_types;
}

/**
 * Add default settings for custom line item types.
 *
 * @param array $line_item_type
 *   The info array of the line item type being configured.
 */
function erpal_commerce_line_item_configuration($line_item_type) {
  switch ($line_item_type['type']) {
    case 'invoice':

      // Include the fields file.
      module_load_include('inc', 'erpal_commerce', 'erpal_commerce.fields');

      // Add default fields for line item 'invoice' commerce bundle.
      $fields = erpal_commerce_invoice_line_item_default_fields();
      erpal_core_add_fields($fields['fields'], 'field');
      erpal_core_add_fields($fields['instances'], 'instance');
      break;
  }
}

/**
 * Returns an appropriate title for line item.
 */
function erpal_commerce_line_item_title($line_item) {
  return $line_item->line_item_label;
}

/**
 * Returns the elements.
 *
 * necessary to add a line item through a line item manager widget.
 */
function erpal_commerce_line_item_add_form($element, &$form_state) {
  $form = array();

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#description' => t('Enter the label of line item.'),
    '#autocomplete_path' => 'erpal_commerce/line_item/autocomplete',
    '#size' => 60,
    '#maxlength' => 255,
  );

  return $form;
}

/**
 * Prepare line item.
 *
 * @param object $line_item
 *   The newly created line item object.
 * @param array $element
 *   The array representing the widget form element.
 * @param array $form_state
 *   The present state of the form upon the latest submission.
 * @param array $form
 *   The actual form array.
 *
 * @return NULL
 *   NULL if all is well or an error message if something goes wrong.
 */
function erpal_commerce_line_item_add_form_submit(&$line_item, $element, &$form_state, $form) {

  if (!empty($element['actions']['label']['#value']) && $exists_line_item = commerce_line_item_load($element['actions']['label']['#value'])) {
    $line_item = $exists_line_item;
  }
  else {
    $line_item->line_item_label = $element['actions']['label']['#value'];
    $line_item->commerce_unit_price = array(
      $element['#language'] => array(
        0 => array(
          'amount' => 0,
          'currency_code' => 'USD',
        ),
      ),
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function erpal_commerce_form_alter(&$form, &$form_state, $form_id) {

  // Fix path query maxlength.
  if (in_array($form_id, array('cat_ui_add_form', 'cat_ui_edit_form')) && isset($form['cat_actions'])) {
    foreach ($form['cat_actions'] as $key => $value) {
      if (isset($value['path_query'])) {
        $form['cat_actions'][$key]['path_query']['#maxlength'] = 512;
      }
    }
  }

  // Small changes for exposed filters on revenue.
  if ($form_id == 'views_exposed_form') {
    $ids = array(
      'views-exposed-form-erpal-invoice-line-items-page-2',
      'views-exposed-form-erpal-invoice-line-items-panel-pane-1',
    );

    // So if line item referenced to commerce_order - not delivered, if to
    // invoice than line item is delivered.
    if (in_array($form['#id'], $ids)) {
      if (!empty($form['type']['#options'])) {
        $form['type']['#options']['commerce_order'] = t('No');
        $form['type']['#options']['invoice'] = t('Yes');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpal_commerce_form_commerce_order_order_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $types = array(
    'quote' => t('Quote'),
    'commerce_order' => t('Order'),
    'invoice' => t('Invoice'),
  );
  // Set current user info.
  if (empty($form['user']['name']['#default_value'])) {
    $form['user']['name']['#default_value'] = $user->name;
  }
  if (empty($form['user']['mail']['#default_value'])) {
    $form['user']['mail']['#default_value'] = $user->mail;
  }
  // Change title for commerce_order bundle.
  if (empty($form_state['commerce_order']->order_id)) {
    $a = ($form_state['commerce_order']->type == 'quote') ? 'a' : 'an';
    drupal_set_title(t('Create @a @type', array('@a' => $a, '@type' => $types[$form_state['commerce_order']->type])));

    // Set default vendor.
    if (isset($form['field_vendor']) && isset($form['field_vendor_address'])) {
      $settings = variable_get('erpal_vendor_settings', array());
      $language = $form['field_vendor']['#language'];
      $vendor = crm_core_contact_load($settings['vendor_id']);
      $vendor_name = implode(' ', $vendor->contact_name[$language][0]['safe']);
      $vendor_name = trim($vendor_name) . ' (' . $settings['vendor_id'] . ')';
      $form['field_vendor'][$language][0]['target_id']['#default_value'] = $vendor_name;

      $language = $form['field_vendor_address']['#language'];
      $form['field_vendor_address'][$language]['#options'] = erpal_commerce_get_profiles($settings['vendor_id']);
      $form['field_vendor_address'][$language]['#default_value'] = $settings['customer_profile_id'];
    }
    if ($form_state['commerce_order']->type == 'invoice') {
      $form['actions']['submit']['#validate'][] = 'erpal_commerce_invoice_form_validate';
    }
  }
  else {
    // Change page title for edit order page.
    drupal_set_title(t('Edit @type @order', array('@order' => $form_state['commerce_order']->order_number, '@type' => $types[$form_state['commerce_order']->type])));
    // Add delete button.
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 41,
      '#submit' => array('erpal_commerce_order_delete_redirect'),
    );
    $form['actions']['delete']['#suffix'] = $form['actions']['submit']['#suffix'];
    $form['actions']['submit']['#suffix'] = '';
  }

  // Fill default customer billing information.
  if (in_array($form_state['commerce_order']->type, $types)) {
    $params = drupal_get_query_parameters();
    if (isset($params['field_customer'])) {
      $customer = crm_core_contact_load($params['field_customer']);
      $language = $form['commerce_customer_billing']['#language'];
      $customer_profiles = field_get_items('crm_core_contact', $customer, 'field_customer_profiles');

      if (isset($customer_profiles[0]['target_id'])) {
        $form['commerce_customer_billing'][$language]['#options'] = erpal_commerce_get_profiles($params['field_customer']);
        $form['commerce_customer_billing'][$language]['#default_value'] = array($customer_profiles[0]['target_id']);
      }
    }
  }

  // Set default sales process if we use another type of activities.
  if ($form_state['commerce_order']->type == 'quote') {
    $params = drupal_get_query_parameters();
    if (isset($params['activity_id'])) {
      $activity = crm_core_activity_load($params['activity_id']);
      $language = $form['field_sales_process']['#language'];
      $sales_process = field_get_items('crm_core_activity', $activity, 'field_activity_sales_process');
      $sales_process = crm_core_activity_load($sales_process[0]['target_id']);

      if (!empty($sales_process->activity_id)) {
       $form['field_sales_process'][$language][0]['target_id']['#default_value'] = $sales_process->title . ' (' . $sales_process->activity_id . ')';
      }
    }
  }

  // Change list of statuses for order.
  if ($form_state['commerce_order']->type == 'commerce_order') {
    $form['order_status']['status']['#options'] = array(
      'Pending' => $form['order_status']['status']['#options']['Pending'],
      'Completed' => $form['order_status']['status']['#options']['Completed'],
      'Canceled' => $form['order_status']['status']['#options']['Canceled'],
    );
  }

  // Change list of statuses for invoice.
  if ($form_state['commerce_order']->type == 'invoice') {
    $form['order_status']['status']['#options'] = array(
      'Invoiced' => $form['order_status']['status']['#options']['Invoiced'],
      'Canceled' => $form['order_status']['status']['#options']['Canceled'],
      'Paid' => $form['order_status']['status']['#options']['Paid'],
    );
    $form['actions']['submit']['#value'] = t('Save invoice');
    $form['actions']['submit']['#submit'][] = 'erpal_commerce_invoice_form_submit';
  }

  // Change list of selectable line item bundles.
  if (!empty($form['commerce_line_items'][$form['commerce_line_items']['#language']]['actions']['line_item_type'])) {
    $options = &$form['commerce_line_items'][$form['commerce_line_items']['#language']]['actions']['line_item_type']['#options'];
  }
  if (!empty($form['commerce_line_items'][$form['commerce_line_items']['#language']]['actions']['bundle']['#options'])) {
    $options = &$form['commerce_line_items'][$form['commerce_line_items']['#language']]['actions']['bundle']['#options'];
  }
  if (!empty($options)) {
    if ($form_state['commerce_order']->type == 'invoice') {
      $options = array('invoice' => $options['invoice']);
    }
    else {
      unset($options['invoice']);
    }
  }
}

/**
 * Change order id and delivery date fir every line item in invoice.
 */
function erpal_commerce_invoice_form_submit(&$form, &$form_state) {
  $invoice = $form_state['commerce_order'];
  foreach (entity_metadata_wrapper('commerce_order', $invoice)->commerce_line_items as $line_item_wrapper) {
    $line_item_wrapper->order_id->set($invoice->order_id);
    $line_item_wrapper->field_line_item_delivery_date->set(REQUEST_TIME);
    $line_item_wrapper->save();
  }
}

/**
 * Change status AGAIN for properly work of rules in commerce billy module.
 */
function erpal_commerce_invoice_form_validate(&$form, &$form_state) {
  $form_state['values']['status'] = $form_state['values']['status_original'];
}

/**
 * Returns output for line item autocompletes.
 */
function erpal_commerce_line_item_autocomplete($string = '') {
  $result = array();
  if ($string) {
    $query = db_select('commerce_line_item', 'cli')
      ->fields('cli', array('line_item_id', 'line_item_label'))
      ->condition('cli.line_item_label', '%' . db_like($string) . '%', 'LIKE')
      ->condition('cli.type', 'invoice');
    $query->join('commerce_order','co','co.order_id != cli.order_id');
    $query->condition('co.type', 'invoice');

    $result = $query->execute()->fetchAllKeyed();
  }
  drupal_json_output($result);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function erpal_commerce_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'commerce_customer_profile_reference') {
    if ($context['instance']['widget']['type'] == 'options_select') {
      $columns = array(
        'commerce_customer_address_name_line',
        'commerce_customer_address_thoroughfare',
        'commerce_customer_address_premise',
        'commerce_customer_address_locality',
        'commerce_customer_address_country',
      );
      $element['#options'] = erpal_commerce_generete_customer_labels($element['#options'], 'commerce_customer_address', $columns);
    }
  }

  // Change button label for line items field.
  if ($context['field']['field_name'] == 'commerce_line_items') {
    // Hide SKU column in commerce_line_item_manager field.
    if ($context['instance']['widget']['type'] == 'commerce_line_item_manager') {
      $element['#header'][2] = '';
      foreach ($element['line_items'] as &$line_item) {
        $line_item['line_item_label']['#access'] = FALSE;
      }
    }
    if ($context['instance']['widget']['type'] == 'inline_entity_form') {
      $element['actions']['ief_add_existing']['#value'] = t('Add existing product');
      $element['actions']['ief_add']['#value'] = t('Add new product');
    }
  }
  // Change button label for customer profile field.
  if ($context['field']['field_name'] == 'field_customer_profiles') {
    if ($context['instance']['widget']['type'] == 'inline_entity_form') {
      $element['actions']['ief_add']['#value'] = t('Add new address');
    }
  }
}

/**
 * Perform alterations before the reference form is included in the IEF widget.
 *
 * The reference form is used to add existing entities through an autocomplete
 * field
 *
 * @param $reference_form
 *   Nested array of form elements that comprise the reference form.
 * @param $form_state
 *   The form state of the parent form.
 */
function erpal_commerce_inline_entity_form_reference_form_alter(&$reference_form, &$form_state) {
  $ief_id = $reference_form['#ief_id'];

  if ($form_state['inline_entity_form'][$ief_id]['settings']['entity_type'] == 'commerce_line_item') {
    $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
    $autocomplete_path = 'erpal_inline_entity_form/autocomplete/' . $instance['entity_type'];
    $autocomplete_path .= '/' . $instance['field_name'] . '/' . $instance['bundle'];
    $reference_form['entity_id']['#autocomplete_path'] = $autocomplete_path;
    $reference_form['#title'] = t('Add existing product');
    $reference_form['entity_id']['#title'] = t('Product');
    $reference_form['actions']['ief_reference_save']['#value'] = t('Add product');
    $reference_form['#ief_element_submit'][0] = 'erpal_commerce_inline_entity_form_reference_form_submit';
    unset($reference_form['#element_validate'][0]);
  }
}

/**
 * Returns output for inline entity form autocompletes for commerce line items field.
 */
function erpal_commerce_inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $settings = inline_entity_form_settings($field, $instance);
  $controller = inline_entity_form_get_controller($instance);
  // The current entity type is not supported, or the string is empty.
  // strlen() is used instead of empty() since '0' is a valid value.
  if (!$field || !$instance || !$controller || !strlen($string)) {
    return MENU_ACCESS_DENIED;
  }

  $results = array();
  if ($field['type'] == 'commerce_line_item_reference') {
    $match_operator = strtolower($controller->getSetting('match_operator'));
    $products = commerce_product_match_products($field, $instance, $string, $match_operator, array(), 10, TRUE);

    // Loop through the products and convert them into autocomplete output.
    foreach ($products as $product_id => $data) {
      $results[] = t('@label (!entity_id)', array('@label' => $data['title'], '!entity_id' => $product_id));
    }
  }

  $matches = array();
  foreach ($results as $result) {
    // Strip things like starting/trailing white spaces, line breaks and tags.
    $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($result)))));
    $matches[$key] = '<div class="reference-autocomplete">' . $result . '</div>';
  }

  drupal_json_output($matches);
}

/**
 * Submits the form for adding existing entities.
 *
 * Adds the specified entity to the IEF form state.
 *
 * @param $reference_form
 *  The reference entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function erpal_commerce_inline_entity_form_reference_form_submit($reference_form, &$form_state) {
  $ief_id = $reference_form['#ief_id'];
  $entity_type = $reference_form['#entity_type'];
  $form_values = drupal_array_get_nested_value($form_state['values'], $reference_form['#parents']);
  $product = entity_load_single('commerce_product', $form_values['entity_id']);
  $type = $form_state['inline_entity_form'][$ief_id]['form settings']['bundle'];
  $order_id = $form_state['build_info']['args'][0]->order_id;
  $attach_entity = commerce_product_line_item_new($product, 1, $order_id, array(), $type);

  // Determine the correct weight of the new element.
  $weight = 0;
  if (!empty($form_state['inline_entity_form'][$ief_id]['entities'])) {
    $weight = max(array_keys($form_state['inline_entity_form'][$ief_id]['entities'])) + 1;
  }

  $form_state['inline_entity_form'][$ief_id]['entities'][] = array(
    'entity' => $attach_entity,
    'weight' => $weight,
    'form' => NULL,
    'needs_save' => TRUE,
  );
}

/**
 * Perform alterations before an entity form is included in the IEF widget.
 *
 * @param array $entity_form
 *   Nested array of form elements that comprise the entity form.
 * @param array $form_state
 *   The form state of the parent form.
 */
function erpal_commerce_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'commerce_line_item') {
    $entity_form['#title'] = t('Add new product');
    $entity_form['line_item_details']['#title'] = t('Product details');
    $entity_form['quantity']['#description'] = t('The quantity of products.');
    $entity_form['actions']['ief_add_save']['#value'] = t('Create product');
    $entity_form['actions']['ief_edit_save']['#value'] = t('Update product');
    if ($entity_form['#op'] == 'edit') {
      $language = $entity_form['commerce_product']['#language'];
      $entity_form['commerce_product'][$language]['form']['sku']['#disabled'] = TRUE;
      $entity_form['commerce_product'][$language]['form']['title']['#disabled'] = TRUE;
      $entity_form['commerce_product'][$language]['form']['commerce_price']['#disabled'] = TRUE;
    }
  }

  if ($entity_form['#bundle'] == 'billing' && $entity_form['#entity_type'] == 'commerce_customer_profile') {
    $entity_form['#title'] = t('Add new address');
    $entity_form['actions']['ief_add_save']['#value'] = t('Create address');
    $entity_form['actions']['ief_edit_save']['#value'] = t('Update address');
  }
}

/**
 * Generate customer lables for Customer profile manager field.
 *
 * @param array $profile_ids
 *   Ids of customer profiles as array.
 *
 * @param string $field_name
 *   Name of field which we use.
 *
 * @param array $columns
 *   Columns of field which we will use for name.
 *
 * @return array
 *   of labels with ids for customer profiles
 */
function erpal_commerce_generete_customer_labels($profile_ids, $field_name, $columns) {
  $none = array_shift($profile_ids);
  $labels = array('_none' => $none);
  if ($profile_ids) {
    $fields = array_merge(array('entity_id'), $columns);
    $result = db_select('field_data_' . $field_name, $field_name)
      ->fields($field_name, $fields)
      ->condition('entity_id', $profile_ids, 'IN')
      ->condition('entity_type', 'commerce_customer_profile')
      ->execute()
      ->fetchAllAssoc('entity_id');

    foreach ($result as $key => $fields) {
      $labels[$key] = implode(' -- ', (array) $fields);
    }
  }
  return $labels;
}

/**
 * Create array with all orders on site.
 *
 * @return array
 *   of labels with ids for orders.
 */
function erpal_commerce_orders() {
  return db_select('commerce_order')
    ->fields('commerce_order', array('order_id', 'order_number'))
    ->condition('type', 'commerce_order')
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Implements hook_action_info().
 */
function erpal_commerce_action_info() {
  return array(
    'erpal_commerce_create_invoice' => array(
      'type' => 'commerce_line_item',
      'label' => t('Create invoice'),
      'description' => t('Creates an invoice from line items'),
      'configurable' => TRUE,
    ),
    'erpal_commerce_delete_invoice' => array(
      'type' => 'commerce_order',
      'label' => t('Delete invoice'),
      'description' => t('Detele an invoice with or without line items'),
      'configurable' => TRUE,
    ),
  );
}

/**
 * Callback for configurable bulk operation for creating an invoice.
 */
function erpal_commerce_create_invoice_form($context, &$form_state) {
  global $user;
  // Include the forms file from the Order module.
  module_load_include('inc', 'commerce_order_ui', 'includes/commerce_order.forms');

  // Replicate order to invoice and unset unused fields.
  if (is_numeric(arg(3))) {
    $order = replicate_clone_entity('commerce_order', commerce_order_load(arg(3)));
  }
  else {
    $order = commerce_order_new($user->uid, NULL, 'invoice');
  }

  $order->type = 'invoice';
  $order->order_id = NULL;
  unset($order->order_number,
        $order->revision_id,
        $order->revision_uid,
        $order->created,
        $order->changed,
        $order->hostname,
        $order->field_order_date,
        $order->field_order_text,
        $order->field_order,
        $order->commerce_line_items);
  $order->uid = $user->uid;
  $form = commerce_order_order_form(array(), $form_state, $order);

  // Hide not needed fields.
  $hide_fields = array(
    'commerce_line_items',
    'field_commerce_billy_cancel_date',
  );
  foreach ($hide_fields as $hide_field) {
    if (!empty($form[$hide_field])) {
      $form[$hide_field]['#access'] = FALSE;
    }
  }

  return $form;
}

/**
 * Validate handler for bulk operation configuration form for creating invoice.
 */
function erpal_commerce_create_invoice_validate($form, &$form_state) {
  commerce_order_order_form_validate($form, $form_state);
}

/**
 * Submit handler for bulk operation configuration form for creating an invoice.
 */
function erpal_commerce_create_invoice_submit($form, &$form_state) {
  commerce_order_order_form_submit($form, $form_state);

  // Add to context order id for using in action.
  $values['order_id'] = $form_state['commerce_order']->order_id;
  return $values;
}

/**
 * Callback for the action erpal_commerce_create_invoice.
 *
 * Create an invoice by invoice line items.
 */
function erpal_commerce_create_invoice(&$line_items, $context) {
  $order = commerce_order_load($context['order_id']);

  // Add line item to order.
  $language = field_language('commerce_order', $order, 'commerce_line_items');
  $order->commerce_line_items[$language][] = array(
    'line_item_id' => $line_items->line_item_id,
  );

  // Ensure the attached line items are associated with the order if they do not
  // have an order_id set yet.
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->order_id->value() != $order->order_id) {
      $line_item_wrapper->order_id->set($order->order_id);
      $line_item_wrapper->field_line_item_delivery_date->set(REQUEST_TIME);
      $line_item_wrapper->save();
    }
  }
  commerce_order_save($order);
  drupal_set_message(t('Invoice <a href="@href">@invoice</a> was created.', array('@href' => url('admin/commerce/orders/' . $order->order_id), '@invoice' => $order->order_number)), 'status', FALSE);
}

/**
 * Callback for configurable bulk operation for deleting an invoice.
 */
function erpal_commerce_delete_invoice_form($context, &$form_state) {
  $form = array();
  $form['title'] = array(
    '#markup' => t('Do you want to remove line items with invoice?'),
  );
  $form['delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete line items'),
  );

  return $form;
}

/**
 * Submit handler for bulk operation configuration form for delete an invoice.
 */
function erpal_commerce_delete_invoice_submit($form, &$form_state) {
  $values['delete'] = $form_state['values']['delete'];
  return $values;
}

/**
 * Callback for the action erpal_commerce_delete_invoice.
 */
function erpal_commerce_delete_invoice(&$invoice, $context) {
  if (!$context['delete']) {
    $language = field_language('commerce_order', $invoice, 'commerce_line_items');
    // Remove line items from invoice entity and make them available
    // for new invoices creation.
    foreach (entity_metadata_wrapper('commerce_order', $invoice)->commerce_line_items as $delta => $line_item_wrapper) {
      $order = $line_item_wrapper->field_line_item_order->value();
      $line_item_wrapper->order_id->set($order->order_id);
      $line_item_wrapper->save();
      unset($invoice->commerce_line_items[$language][$delta]);
    }
    commerce_order_save($invoice);
  }
  // Delete invoice entity, by default line items will be removed too.
  entity_delete('commerce_order', $invoice->order_id);
}

/**
 * Implements hook_flush_caches().
 */
function erpal_commerce_flush_caches() {

  // Include the fields file.
  module_load_include('inc', 'erpal_commerce', 'erpal_commerce.fields');

  // Add default fields for 'order' commerce bundle.
  $fields = erpal_commerce_order_default_fields();
  erpal_core_add_fields($fields['fields'], 'field');
  erpal_core_add_fields($fields['instances'], 'instance');

  // Change field 'commerce_customer_billing' widget to 'options_select' and
  // add dfv settings for all needed bundles of commerce order entity.
  $commerce_order_types = array('invoice', 'commerce_order', 'quote');
  foreach ($commerce_order_types as $commerce_order_type) {
    $info_instance = field_info_instance('commerce_order', 'commerce_customer_billing', $commerce_order_type);
    if (!empty($info_instance) && $info_instance['widget']['module'] != 'options') {
      $info_instance['widget'] = array(
        'module' => 'options',
        'settings' => array(
          'wrapper_type' => '',
        ),
        'type' => 'options_select',
        'weight' => -5,
      );
      $info_instance['settings']['dfv'] = array(
        'status' => 1,
        'parent' => 'field_customer',
        'view' => 'erpal_customer_profile:dfv_1',
      );
      $info_instance['label'] = t('Customer Address');
      field_update_instance($info_instance);
    }
  }
  // Enable reference dialog for invoice order field.
  $info_instance = field_info_instance('commerce_order', 'field_invoice_order', 'invoice');
  $info_instance['widget']['settings']['references_dialog_add'] = 1;
  $info_instance['widget']['settings']['references_dialog_edit'] = 1;
  $info_instance['widget']['settings']['references_dialog_search'] = 1;
  $info_instance['widget']['settings']['references_dialog_search_view'] = '';
  field_update_instance($info_instance);

  // Add default fields for working with commerce customer profile.
  $fields = erpal_commerce_customer_profile_default_fields();
  erpal_core_add_fields($fields['fields'], 'field');
  erpal_core_add_fields($fields['instances'], 'instance');

  // Add default fields for 'quote' commerce bundle.
  $fields = erpal_commerce_quote_default_fields();
  erpal_core_add_fields($fields['fields'], 'field');
  erpal_core_add_fields($fields['instances'], 'instance');
}

/**
 * Form for the order deletion confirmation form.
 *
 * @see erpal_commerce_order_delete_form_submit()
 */
function erpal_commerce_order_delete_form($form, &$form_state, $order) {
  $form['commerce_order'] = array('#type' => 'value', '#value' => $order);

  return confirm_form($form,
    t('Are you sure you want to delete %order_number?', array('%order_number' => $order->order_number)),
    'admin/commerce/orders/' . $order->order_id,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Executes order deletion.
 *
 * @see erpal_commerce_order_delete_form()
 */
function erpal_commerce_order_delete_form_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $order = $form_state['values']['commerce_order'];
    if (commerce_order_delete($order->order_id)) {
      watchdog('erpal_commerce', '@type: deleted %order_number.', array('@type' => $order->type, '%order_number' => $order->order_number));
      drupal_set_message(t('@type %order_number has been deleted.', array('@type' => $order->type, '%order_number' => $order->order_number)));
    }
    else {
      drupal_set_message(t('@type %order_number could not be deleted.', array('@type' => $order->type, '%order_number' => $order->order_number)), 'error');
    }
  }

  $redirect = array(
    'commerce_order' => 'orders',
    'quote' => 'quotes',
    'invoice' => 'invoices',
  );
  $form_state['redirect'] = $redirect[$order->type];
}

/**
 * Redirect to order deletion.
 *
 * @see erpal_commerce_order_delete_form()
 */
function erpal_commerce_order_delete_redirect($form, &$form_state) {
  $des = drupal_get_destination();
  if (!empty($des['destination'])) {
    unset($_GET['destination']);
  }
  drupal_goto('admin/commerce/orders/' . $form_state['commerce_order']->order_id . '/delete', array('query' => $des));
}

/**
 * Implements hook_references_dialog_entity_admin_paths().
 */
function erpal_commerce_references_dialog_entity_admin_paths() {
  return array(
    'commerce_order' => array(
      'add' => 'admin/commerce/orders/add/[bundle]',
      'edit' => 'admin/commerce/orders/[entity_id]/edit',
    ),
  );
}

/**
 * Implements hook_commerce_order_state_info().
 */
function erpal_commerce_commerce_order_state_info() {
  return array(
    'paid' => array(
      'name' => 'paid',
      'title' => t('Paid'),
      'description' => t('Paid state.'),
      'weight' => 17,
      'default_status' => 'paid',
    ),
  );
}

/**
 * Implements hook_commerce_order_status_info().
 */
function erpal_commerce_commerce_order_status_info() {
  return array(
    'paid' => array(
      'name' => 'paid',
      'title' => t('Paid'),
      'state' => 'paid',
    ),
  );
}

/**
 * Hepler function to get profiles list.
 */
function erpal_commerce_get_profiles($param) {
  $profiles = array('' => t('- None -'));
  $view = views_get_view('erpal_customer_profile');
  $view->set_display('dfv_1');
  $view->set_arguments(array($param));
  $view->pre_execute();
  $view->execute();

  if (isset($view->result)) {
    foreach ($view->result as $profile) {
      $str = array();
      foreach ($profile as $field) {
        $str[] = $field;
      }
      $profiles[$profile->profile_id] = implode(' - ', $str);
    }
  }

  return $profiles;
}

/**
 * Implements hook_entity_insert().
 */
function erpal_commerce_entity_insert($entity, $type) {
  $not_allowed = array(
    'field_collection_item',
    'date_item',
    'commerce_line_item',
    'erpal_payment_modality',
  );

  if (!in_array($type, $not_allowed)) {
    $info = entity_get_info($type);
    $url = entity_uri($type, $entity);
    $label = entity_label($type, $entity);
    if (!empty($url) && !empty($label)) {
      $bundle = $entity->{$info['bundle keys']['bundle']};
      $bundle_label = $info['bundles'][$bundle]['label'];

      drupal_set_message(t('View new @type <a href="@url">@title</a>', array('@url' => url($url['path'], array('absolute' => TRUE)), '@type' => $bundle_label, '@title' => $label)));
    }
  }
}
